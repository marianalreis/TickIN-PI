<!DOCTYPE html>
<html lang="pt-br">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= locals.isEditing ? 'Editar' : 'Registrar' %> Evento - TickIN</title>
    <link rel="stylesheet" href="../css/global.css" />
    <link rel="stylesheet" href="../css/header.css" />
    <link rel="stylesheet" href="../css/register-event.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
  </head>
  <body>
    <!-- Include the header -->
    <%- include('../partials/header') %>

    <div class="container">
      <h1 class="page-title"><%= locals.isEditing ? 'Editar' : 'Registrar Novo' %> Evento</h1>

      <div class="form-container">
        <div class="success-message" id="successMessage" style="display: none;">
          Evento <%= locals.isEditing ? 'atualizado' : 'registrado' %> com sucesso!
        </div>
        <div class="error-message" id="errorMessage" style="display: none;"></div>

        <form id="eventForm" 
              data-is-editing="<%= locals.isEditing ? 'true' : 'false' %>"
              data-evento-id="<%= locals.event ? event.id : '' %>"
              data-api-url="<%= locals.isEditing ? `/api/eventos/${locals.event.id}` : '/api/eventos' %>">
          <div class="form-group">
            <label for="title">Nome do Evento</label>
            <input type="text" id="title" name="title" class="form-control" required 
              value="<%= locals.event ? event.titulo : '' %>">
          </div>

          <div class="form-group">
            <label for="description">Descrição</label>
            <textarea id="description" name="description" class="form-control" required><%= locals.event ? event.descricao : '' %></textarea>
          </div>

          <div class="form-group">
            <label for="date">Data</label>
            <input type="date" id="date" name="date" class="form-control" required
              value="<%= locals.event ? (typeof event.data === 'string' ? event.data.split('T')[0] : event.data.toISOString().split('T')[0]) : '' %>">
          </div>

          <div class="form-group">
            <label for="time">Horário</label>
            <input type="time" id="time" name="time" class="form-control" required
              value="<%= locals.event ? event.horario : '' %>">
          </div>

          <div class="form-group">
            <label for="location">Local</label>
            <input type="text" id="location" name="location" class="form-control" required
              value="<%= locals.event ? event.local : '' %>">
          </div>

          <div class="form-group">
            <label>Imagem do Evento</label>
            <div class="image-upload" id="imageUploadArea">
              <input type="file" id="uploadImagem" accept="image/*" style="display: none;" />
              <div class="upload-content">
                <i class="fas fa-cloud-upload-alt"></i>
                <p>Clique para selecionar uma imagem</p>
              </div>
            </div>
            <div id="imagePreviewContainer"></div>
          </div>

          <button type="submit" class="submit-button">
            <%= locals.isEditing ? 'Atualizar' : 'Registrar' %> Evento
          </button>
          <% if (locals.isEditing && locals.event && locals.event.id) { %>
          <button type="button" class="delete-button" onclick="deleteEvento('<%= locals.event.id %>')">
            Deletar Evento
          </button>
          <% } %>
        </form>
      </div>
    </div>

    <style>
      .image-upload {
        border: 2px dashed #ccc;
        border-radius: 8px;
        padding: 20px;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-bottom: 20px;
      }

      .image-upload:hover {
        border-color: #666;
        background-color: #f9f9f9;
      }

      .upload-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
      }

      .upload-content i {
        font-size: 2em;
        color: #666;
      }

      #imagePreviewContainer img {
        max-width: 200px;
        margin-top: 10px;
        border-radius: 4px;
      }
    </style>

    <!-- Adicionar o ID do organizador para o JavaScript -->
    <script>
      window.organizadorId = '<%= locals.usuario && locals.usuario.id ? locals.usuario.id : "" %>';
      window.apiUrl = '<%= locals.isEditing ? `/api/eventos/${locals.event.id}` : "/api/eventos" %>';
      // Log para debug
      console.log('ID do organizador:', window.organizadorId);
      console.log('API URL:', window.apiUrl);

      async function deleteEvento(eventoId) {
        if (!confirm('Tem certeza que deseja deletar este evento?')) return;
        try {
          const response = await fetch(`/eventos/${eventoId}`, {
            method: 'DELETE',
            credentials: 'include'
          });
          if (!response.ok) throw new Error('Erro ao deletar evento');
          alert('Evento deletado com sucesso!');
          window.location.href = '/meusEventos';
        } catch (error) {
          alert(error.message);
        }
      }
    </script>
    
    <!-- Scripts -->
    <script src="../js/eventos.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('eventForm');
        const imageUploadArea = document.getElementById('imageUploadArea');
        const uploadInput = document.getElementById('uploadImagem');
        const imagePreviewContainer = document.getElementById('imagePreviewContainer');
        const successMessage = document.getElementById('successMessage');
        const errorMessage = document.getElementById('errorMessage');
        let uploadedImageUrl = null;

        // Configuração do Supabase
        const supabaseUrl = 'https://fmcsjnwxvzauxnvpdrnq.supabase.co';
        const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZtY3Nqbnd4dnphdXhudnBkcm5xIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgwMDEwMjQsImV4cCI6MjA2MzU3NzAyNH0.IQYFz_6W3-8kYIiD9kJnDJM5ucQmgsE8-Nn8Y3dnKCo';
        const supabase = window.supabase.createClient(supabaseUrl, supabaseKey);

        // Configurar o upload de imagem
        imageUploadArea.addEventListener('click', () => uploadInput.click());
        uploadInput.addEventListener('change', async (e) => {
          const file = e.target.files[0];
          if (!file) return;

          try {
            // Upload para o Supabase
            const nomeUnico = `${Date.now()}-${file.name}`;
            console.log('Iniciando upload para:', `eventos/${nomeUnico}`);
            
            const { data, error: uploadError } = await supabase.storage
              .from('imagens-eventos')
              .upload(`eventos/${nomeUnico}`, file, {
                cacheControl: '3600',
                upsert: false
              });

            if (uploadError) {
              console.error('Erro no upload:', uploadError);
              throw new Error(`Erro ao fazer upload: ${uploadError.message}`);
            }

            console.log('Upload concluído:', data);

            // Obter URL pública
            const { data: urlData } = supabase.storage
              .from('imagens-eventos')
              .getPublicUrl(`eventos/${nomeUnico}`);

            console.log('URL pública gerada:', urlData);
            uploadedImageUrl = urlData.publicUrl;

            // Mostrar preview da imagem
            imagePreviewContainer.innerHTML = `
              <div class="image-preview">
                <img src="${uploadedImageUrl}" alt="Preview" style="max-width: 200px; max-height: 200px; object-fit: cover;">
                <button type="button" class="remove-image" onclick="removeImage()">×</button>
              </div>
            `;

            // Adicionar a URL da imagem ao formulário
            const imagemInput = document.createElement('input');
            imagemInput.type = 'hidden';
            imagemInput.name = 'imagem';
            imagemInput.value = uploadedImageUrl;
            
            // Remover input anterior se existir
            const oldInput = form.querySelector('input[name="imagem"]');
            if (oldInput) oldInput.remove();
            
            form.appendChild(imagemInput);
            console.log('URL da imagem adicionada ao formulário:', uploadedImageUrl);

          } catch (error) {
            console.error('Erro:', error);
            errorMessage.textContent = 'Erro ao fazer upload da imagem. Por favor, tente novamente.';
            errorMessage.style.display = 'block';
          }
        });

        // Função para remover imagem
        window.removeImage = () => {
          uploadedImageUrl = null;
          imagePreviewContainer.innerHTML = '';
          uploadInput.value = '';
          const oldInput = form.querySelector('input[name="imagem"]');
          if (oldInput) oldInput.remove();
        };

        // Manipular envio do formulário
        form.addEventListener('submit', async (e) => {
          e.preventDefault();
          errorMessage.style.display = 'none';
          successMessage.style.display = 'none';

          const formData = {
            titulo: form.title.value,
            descricao: form.description.value,
            data: form.date.value,
            horario: form.time.value,
            local: form.location.value
          };

          // Adicionar a URL da imagem apenas se uma nova imagem foi enviada
          if (uploadedImageUrl) {
            formData.imagem = uploadedImageUrl;
          }

          try {
            const isEditing = form.dataset.isEditing === 'true';
            const method = isEditing ? 'PUT' : 'POST';
            const url = form.dataset.apiUrl;

            const response = await fetch(url, {
              method: method,
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(formData)
            });

            if (!response.ok) {
              const error = await response.json();
              throw new Error(error.erro || 'Erro ao salvar evento');
            }

            successMessage.textContent = `Evento ${isEditing ? 'atualizado' : 'criado'} com sucesso!`;
            successMessage.style.display = 'block';

            setTimeout(() => {
              window.location.href = '/meus-eventos';
            }, 2000);
          } catch (error) {
            console.error('Erro:', error);
            errorMessage.textContent = error.message || 'Erro ao salvar evento. Por favor, tente novamente.';
            errorMessage.style.display = 'block';
          }
        });
      });
    </script> 
  </body>
</html>
