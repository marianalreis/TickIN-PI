<!DOCTYPE html>
<html lang="pt-br">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Minhas Inscrições - TickIN</title>
    <link rel="stylesheet" href="/css/global.css" />
    <link rel="stylesheet" href="/css/header.css" />
    <link rel="stylesheet" href="/css/my-registrations.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <script src="/js/inscritos.js"></script>
  </head>
  <body>
    <%- include('../partials/header', { currentPage: 'minhas-inscricoes' }) %>

    <main>
      <div class="container">
        <h1 class="page-title">Minhas Inscrições</h1>
        <div id="inscricoesGrid" class="registrations-grid"></div>

        <div id="loading" class="loading-spinner" hidden>
          <img src="/assets/loading.gif" alt="Carregando...">
          <p>Carregando inscrições...</p>
        </div>

        <div id="noResults" class="empty-state" hidden>
          <img src="/assets/no-results.png" alt="Sem inscrições">
          <h2>Você ainda não tem inscrições</h2>
          <p>Explore nossos eventos e encontre algo que você goste!</p>
          <a href="/pesquisar" class="browse-button">Explorar Eventos</a>
        </div>

        <div id="errorMessage" class="error-message" hidden>
          <img src="/assets/error.png" alt="Erro">
          <p>Ocorreu um erro ao carregar suas inscrições. Tente novamente.</p>
        </div>
      </div>
    </main>

    <template id="inscricaoTemplate">
      <div class="registration-card">
        <div class="event-image">
          <img src="" alt="" style="width: 100%; height: 200px; object-fit: cover; border-radius: 8px 8px 0 0;">
        </div>
        <div class="event-content">
          <h3 class="event-title"></h3>
          <div class="event-info">
            <div class="info-item">
              <img src="/assets/calendar.png" alt="Data" class="info-icon">
              <span class="event-date"></span>
            </div>
            <div class="info-item">
              <img src="/assets/location.png" alt="Local" class="info-icon">
              <span class="event-location"></span>
            </div>
          </div>
          <div class="status-badge"></div>
          <div class="action-buttons">
            <button class="action-button view-button">Ver Evento</button>
            <button class="action-button cancel-button">Cancelar</button>
            <button class="action-button confirm-button">Confirmar Presença</button>
          </div>
        </div>
      </div>
    </template>

    <!-- Dados do servidor -->
    <script type="application/json" id="inscricoesData">
      <%- JSON.stringify(inscricoes || []) %>
    </script>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const inscricoesData = JSON.parse(document.getElementById('inscricoesData').textContent);
        console.log('Dados das inscrições:', inscricoesData);

        const inscricoesGrid = document.getElementById('inscricoesGrid');
        const template = document.getElementById('inscricaoTemplate');
        const noResults = document.getElementById('noResults');
        const errorMessage = document.getElementById('errorMessage');

        function renderInscricao(inscricao) {
          const card = template.content.cloneNode(true);
          
          // Configurando a imagem
          const imagem = card.querySelector('.event-image img');
          imagem.src = inscricao.evento.imagem || '/assets/tickIN.png';
          imagem.alt = inscricao.evento.titulo;
          imagem.onerror = () => {
            imagem.src = '/assets/tickIN.png';
          };

          // Preenchendo informações do evento
          card.querySelector('.event-title').textContent = inscricao.evento.titulo;
          card.querySelector('.event-date').textContent = formatarData(inscricao.evento.data) + ' às ' + inscricao.evento.horario;
          card.querySelector('.event-location').textContent = inscricao.evento.local;

          // Configurando status
          const statusBadge = card.querySelector('.status-badge');
          statusBadge.textContent = inscricao.status;
          statusBadge.className = 'status-badge ' + inscricao.status.toLowerCase();

          // Configurando botões de ação
          const viewButton = card.querySelector('.view-button');
          const cancelButton = card.querySelector('.cancel-button');
          const confirmButton = card.querySelector('.confirm-button');

          viewButton.onclick = () => {
            window.location.href = `/evento/${inscricao.evento.id}`;
          };

          const dataEvento = new Date(inscricao.evento.data);
          const hoje = new Date();

          if (dataEvento < hoje) {
            cancelButton.style.display = 'none';
            confirmButton.style.display = 'none';
            statusBadge.textContent = 'Evento Encerrado';
            statusBadge.className = 'status-badge encerrado';
          } else {
            cancelButton.onclick = () => cancelarInscricao(inscricao.inscricao_id);
            confirmButton.onclick = () => confirmarPresenca(inscricao.inscricao_id);
          }

          inscricoesGrid.appendChild(card);
        }

        function formatarData(data) {
          if (!data) return '';
          try {
            return new Date(data).toLocaleDateString('pt-BR');
          } catch (error) {
            console.error('Erro ao formatar data:', error);
            return data;
          }
        }

        async function cancelarInscricao(inscricaoId) {
          console.log('Tentando cancelar inscrição:', {
            inscricaoId,
            inscricoesData: inscricoesData,
            inscricaoEncontrada: inscricoesData.find(i => i.inscricao_id === inscricaoId),
            inscricaoEncontradaDetalhada: inscricoesData.find(i => i.inscricao_id === inscricaoId) ? {
              inscricao_id: inscricoesData.find(i => i.inscricao_id === inscricaoId).inscricao_id,
              usuario_id: inscricoesData.find(i => i.inscricao_id === inscricaoId).usuario_id,
              status: inscricoesData.find(i => i.inscricao_id === inscricaoId).status,
              evento: inscricoesData.find(i => i.inscricao_id === inscricaoId).evento
            } : null
          });

          try {
            const response = await fetch(`/api/inscricoes/${inscricaoId}`, {
              method: 'DELETE',
              credentials: 'include',
              headers: {
                'Content-Type': 'application/json'
              }
            });
            
            if (!response.ok) {
              const data = await response.json();
              console.error('Erro na resposta:', {
                status: response.status,
                statusText: response.statusText,
                data,
                inscricaoId,
                inscricaoEncontrada: inscricoesData.find(i => i.inscricao_id === inscricaoId)
              });
              throw new Error(data.erro || 'Erro ao cancelar inscrição');
            }
            
            window.location.reload();
          } catch (error) {
            console.error('Erro:', error);
            alert(error.message || 'Erro ao cancelar inscrição. Tente novamente.');
          }
        }

        async function confirmarPresenca(inscricaoId) {
          try {
            const response = await fetch(`/api/inscricoes/${inscricaoId}/confirmar`, {
              method: 'POST'
            });
            if (response.ok) {
              window.location.reload();
            } else {
              throw new Error('Erro ao confirmar presença');
            }
          } catch (error) {
            console.error('Erro:', error);
            alert('Erro ao confirmar presença. Tente novamente.');
          }
        }

        async function carregarInscricoes() {
          try {
            inscricoesGrid.innerHTML = '';
            noResults.style.display = 'none';
            errorMessage.style.display = 'none';

            if (!inscricoesData || inscricoesData.length === 0) {
              noResults.style.display = 'block';
              return;
            }

            inscricoesData.forEach(inscricao => {
              renderInscricao(inscricao);
            });
          } catch (error) {
            console.error('Erro ao carregar inscrições:', error);
            errorMessage.style.display = 'block';
          }
        }

        carregarInscricoes();
      });
    </script>
  </body>
</html>
