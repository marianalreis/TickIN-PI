<!DOCTYPE html>
<html lang="pt-br">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Pesquisar Eventos - TickIN</title>
    <link rel="stylesheet" href="/css/global.css" />
    <link rel="stylesheet" href="/css/header.css" />
    <link rel="stylesheet" href="/css/events.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <script src="/js/inscritos.js"></script>
  </head>
  <body>
    <%- include('../partials/header', { currentPage: 'pesquisar' }) %>

    <main>
      <div class="search-container">
        <div class="search-box">
          <input 
            type="text" 
            id="searchInput" 
            class="search-input" 
            placeholder="Pesquisar eventos..."
            autocomplete="off"
          >
          <button class="search-button" aria-label="Buscar">
            <img src="/assets/search.png" alt="Buscar">
          </button>
        </div>

        <div class="filters">
          <select id="statusFilter" class="filter-select">
            <option value="">Todos os status</option>
            <option value="aberto">Abertos</option>
            <option value="fechado">Fechados</option>
          </select>
          <select id="orderBy" class="filter-select">
            <option value="data">Data</option>
            <option value="nome">Nome</option>
          </select>
        </div>

        <div id="eventosGrid" class="events-grid"></div>

        <div id="loading" class="loading-spinner" hidden>
          <img src="/assets/loading.gif" alt="Carregando...">
          <p>Carregando eventos...</p>
        </div>

        <div id="noResults" class="no-results" hidden>
          <img src="/assets/no-results.png" alt="Sem resultados">
          <p>Nenhum evento encontrado</p>
        </div>

        <div id="errorMessage" class="error-message" hidden>
          <img src="/assets/error.png" alt="Erro">
          <p>Ocorreu um erro ao carregar os eventos. Tente novamente.</p>
        </div>
      </div>
    </main>

    <template id="eventoTemplate">
      <div class="event-card">
        <a href="#" class="event-link">
          <div class="event-image">
            <img src="" alt="">
          </div>
          <div class="event-content">
            <h3 class="event-title"></h3>
            <div class="event-info">
              <div class="info-item">
                <img src="/assets/calendar.png" alt="Data" class="info-icon">
                <span class="event-date"></span>
              </div>
              <div class="info-item">
                <img src="/assets/location.png" alt="Local" class="info-icon">
                <span class="event-location"></span>
              </div>
            </div>
            <div class="organizer">
              <img src="/assets/user.png" alt="Organizador" class="organizer-icon">
              <span class="organizer-info"></span>
            </div>
            <button class="event-button">Inscrever-se</button>
          </div>
        </a>
      </div>
    </template>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const searchInput = document.getElementById('searchInput');
        const statusFilter = document.getElementById('statusFilter');
        const orderBy = document.getElementById('orderBy');
        const eventosGrid = document.getElementById('eventosGrid');
        const loading = document.getElementById('loading');
        const noResults = document.getElementById('noResults');
        const errorMessage = document.getElementById('errorMessage');
        const template = document.getElementById('eventoTemplate');

        let timeoutId;

        async function buscarEventos() {
          try {
            loading.hidden = false;
            eventosGrid.hidden = true;
            noResults.hidden = true;
            errorMessage.hidden = true;

            const filtros = {
              termo: searchInput.value,
              status: statusFilter.value,
              ordem: orderBy.value
            };

            const response = await fetch(`/api/eventos/publicos?${new URLSearchParams(filtros)}`);
            if (!response.ok) {
              throw new Error('Erro ao buscar eventos');
            }
            const eventos = await response.json();
            await renderizarEventos(eventos);
          } catch (error) {
            console.error('Erro ao buscar eventos:', error);
            errorMessage.hidden = false;
            eventosGrid.hidden = true;
          } finally {
            loading.hidden = true;
          }
        }

        async function verificarInscricao(eventoId) {
          try {
            const response = await fetch(`/api/inscricoes/verificar/${eventoId}`);
            if (!response.ok) {
              throw new Error('Erro ao verificar inscrição');
            }
            const data = await response.json();
            return data.inscrito;
          } catch (error) {
            console.error('Erro ao verificar inscrição:', error);
            return false;
          }
        }

        async function handleInscrever(eventoId) {
          try {
            const inscrito = await verificarInscricao(eventoId);
            if (inscrito) {
              alert('Você já está inscrito neste evento!');
              return;
            }

            const response = await fetch('/api/inscricoes', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ evento_id: eventoId })
            });

            if (!response.ok) {
              const error = await response.json();
              throw new Error(error.erro || 'Erro ao realizar inscrição');
            }

            alert('Inscrição realizada com sucesso!');
            buscarEventos(); // Atualiza a lista de eventos
          } catch (error) {
            console.error('Erro ao inscrever:', error);
            alert(error.message || 'Erro ao realizar inscrição. Tente novamente.');
          }
        }

        async function renderizarEventos(eventos) {
          eventosGrid.innerHTML = '';

          if (!eventos || eventos.length === 0) {
            noResults.hidden = false;
            return;
          }

          for (const evento of eventos) {
            const card = template.content.cloneNode(true);
            
            const imagem = card.querySelector('.event-image img');
            imagem.src = evento.imagem || '/assets/tickIN.png';
            imagem.alt = evento.titulo;
            imagem.onerror = () => {
              imagem.src = '/assets/tickIN.png';
            };

            const link = card.querySelector('.event-link');
            link.href = `/evento/${evento.id}`;

            card.querySelector('.event-title').textContent = evento.titulo;
            card.querySelector('.event-date').textContent = formatarData(evento.data) + ' às ' + evento.horario;
            card.querySelector('.event-location').textContent = evento.local;
            card.querySelector('.organizer-info').textContent = 'Organizado por ' + evento.organizador_nome;

            const btnInscricao = card.querySelector('.event-button');
            const dataEvento = new Date(evento.data);
            
            if (dataEvento < new Date()) {
              btnInscricao.disabled = true;
              btnInscricao.textContent = 'Evento Encerrado';
              btnInscricao.classList.add('disabled');
            } else {
              const inscrito = await verificarInscricao(evento.id);
              if (inscrito) {
                btnInscricao.disabled = true;
                btnInscricao.textContent = 'Já Inscrito';
                btnInscricao.classList.add('disabled');
              } else {
                btnInscricao.onclick = (e) => {
                  e.preventDefault();
                  handleInscrever(evento.id);
                };
              }
            }

            eventosGrid.appendChild(card);
          }

          eventosGrid.hidden = false;
        }

        function formatarData(data) {
          if (!data) return '';
          try {
            return new Date(data).toLocaleDateString('pt-BR');
          } catch (error) {
            console.error('Erro ao formatar data:', error);
            return data;
          }
        }

        // Event listeners
        searchInput.addEventListener('input', () => {
          clearTimeout(timeoutId);
          timeoutId = setTimeout(buscarEventos, 300);
        });

        statusFilter.addEventListener('change', buscarEventos);
        orderBy.addEventListener('change', buscarEventos);

        // Carregar eventos iniciais
        buscarEventos();
      });
    </script>
  </body>
</html>